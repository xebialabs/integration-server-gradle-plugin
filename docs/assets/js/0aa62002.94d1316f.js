"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[240],{9200:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return s},default:function(){return c}});var o=n(7462),i=n(3366),a=(n(7294),n(3905)),r=["components"],l={sidebar_position:9},d="Development",u={unversionedId:"getting-started/development",id:"getting-started/development",isDocsHomePage:!1,title:"Development",description:"How to build the plugin",source:"@site/docs/getting-started/development.md",sourceDirName:"getting-started",slug:"/getting-started/development",permalink:"/integration-server-gradle-plugin/docs/getting-started/development",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Limitations",permalink:"/integration-server-gradle-plugin/docs/getting-started/limitations"}},s=[{value:"How to build the plugin",id:"how-to-build-the-plugin",children:[]},{value:"Where documentation resides",id:"where-documentation-resides",children:[]},{value:"How to run documentation site locally",id:"how-to-run-documentation-site-locally",children:[]},{value:"How to generate the documentation for GitHub",id:"how-to-generate-the-documentation-for-github",children:[]},{value:"Troubleshooting",id:"troubleshooting",children:[]}],p={toc:s};function c(e){var t=e.components,n=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"development"},"Development"),(0,a.kt)("h2",{id:"how-to-build-the-plugin"},"How to build the plugin"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"./gradlew clean build publishToMavenLocal snapshot")),(0,a.kt)("p",null,"This command will do a clean build and publish it as a snapshot version to your local maven repository.\nSo that in the project where you use the plugin you can just point to a snapshot to test your changes.  "),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},'buildscript {\n    repositories {\n        maven {\n            url "https://plugins.gradle.org/m2/"\n        }\n    }\n    dependencies {\n        classpath("com.xebialabs.gradle.plugins:integration-server-gradle-plugin:10.3.0-SNAPSHOT")\n    }\n}\n')),(0,a.kt)("h2",{id:"where-documentation-resides"},"Where documentation resides"),(0,a.kt)("p",null,"You can find the documentation to edit in documentation/docs folder. The ",(0,a.kt)("inlineCode",{parentName:"p"},"docs")," folder contains a built documentation\nwhich is served on GitHub Pages."),(0,a.kt)("h2",{id:"how-to-run-documentation-site-locally"},"How to run documentation site locally"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"./gradlew yarnRunStart")),(0,a.kt)("p",null,"The site will be opened automatically in your default browser on page: ",(0,a.kt)("a",{parentName:"p",href:"http://localhost:3000/integration-server-gradle-plugin/"},"http://localhost:3000/integration-server-gradle-plugin/")," "),(0,a.kt)("h2",{id:"how-to-generate-the-documentation-for-github"},"How to generate the documentation for GitHub"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"./gradlew docBuild")," and commit all modified files in docs folder. Keep in mind that during the release this job will be executed and\nautomatically committed and pushed. That process prevents stale changes between markdown files and served information on GitHub Pages. "),(0,a.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,a.kt)("p",null,"In case you have to debug the plugin in the application, you can add a parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"-Dorg.gradle.debug=true"),"."),(0,a.kt)("p",null,"The full command can look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"./gradlew clean startIntegrationServer --stacktrace -Dorg.gradle.debug=true --no-daemon\n")),(0,a.kt)("p",null,"Then in Intellij IDEA you are connecting to remote port 5005. The gradle task will proceed executing only after\nyou will be connected to this port. If you have some troubles with it, you might need first to execute: ",(0,a.kt)("inlineCode",{parentName:"p"},"./gradlew --stop")),(0,a.kt)("p",null,"When you run the job on CI pipeline, and the error doesn't give a clue what is going on, it's better to add ",(0,a.kt)("inlineCode",{parentName:"p"},"--stactrace"),"\nto get a better idea where exactly it fails."))}c.isMDXComponent=!0}}]);