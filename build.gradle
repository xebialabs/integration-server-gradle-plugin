plugins {
    id 'groovy'
    id 'idea'
    id 'io.codearte.nexus-staging' version '0.30.0'
    id 'maven-publish'
    id 'nebula.release' version '15.3.1'
    id 'signing'
}

group = 'com.xebialabs.gradle.plugins'
defaultTasks 'build'

sourceCompatibility = languageLevel
targetCompatibility = languageLevel

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'https://oss.sonatype.org/content/repositories/releases'
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation("org.codehaus.groovy.modules.http-builder:http-builder:$httpBuilderVersion") {
        exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    implementation "commons-io:commons-io:$commonsIOVersion"
    implementation "de.vandermeer:asciitable:$asciitableVersion"
    implementation "gradle.plugin.com.palantir.gradle.docker:gradle-docker:$dockerPluginVersion"
    implementation "mysql:mysql-connector-java:${project.properties['driverVersions.mysql']}"
    implementation "org.dbunit:dbunit:$dbUnitVersion"
    implementation "org.postgresql:postgresql:${project.properties['driverVersions.postgres']}"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

test {
    useJUnitPlatform()
}

if (project.hasProperty("sonatypeUsername") && project.hasProperty("public")) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'Integration Server Gradle Plugin'
                    description = 'The easy way to get custom setup for Deploy up and running'
                    url = 'https://github.com/xebialabs/integration-server-gradle-plugin.git'
                    licenses {
                        license {
                            name = 'GPLv2 with Digital.ai FLOSS License Exception'
                            url = 'https://github.com/xebialabs/integration-server-gradle-plugin/blob/master/LICENSE'
                        }
                    }

                    scm {
                        url = 'https://github.com/xebialabs/integration-server-gradle-plugin'
                    }
                }
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = project.property("sonatypeUsername")
                    password = project.property("sonatypePassword")
                }
            }
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots"
                credentials {
                    username = project.property("sonatypeUsername")
                    password = project.property("sonatypePassword")
                }
            }
        }
    }
} else {
    publishing {
        publications {
            myLibrary(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                url "${project.property("nexusBaseUrl")}/groups/public"
                credentials {
                    username = project.property("nexusUserName")
                    password = project.property("nexusPassword")
                }
            }
        }
    }
}

jar {
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

if (project.hasProperty("sonatypeUsername") && project.hasProperty("public")) {
    signing {
        sign publishing.publications.mavenJava
    }

    nexusStaging {
        delayBetweenRetriesInMillis = 5000
        numberOfRetries = 5
        packageGroup = "com.xebialabs"

        username = project.property("sonatypeUsername")
        password = project.property("sonatypePassword")
    }
}

import com.xebialabs.gradle.release.NebulaRelease

task nebulaRelease(type: NebulaRelease)

task uploadArchives {
    dependsOn publish
}

task dumpVersion {
    doLast {
        file(buildDir).mkdirs()
        def out = file("$buildDir/version.dump")
        out.write("version=$project.version")
    }
}
